plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
	id 'jacoco'
}

group = 'com.emazon'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.6.0'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}



test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

def jacocoExclude = [
		'**/mapper/**',
		'**/model/**',
]

jacocoTestReport {
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclude)
		})
	}
	dependsOn test // tests are required to run before generating the report
}

